<project name="OG-PlatformNative" default="configure-and-install">

  <target name="configure-and-install" depends="configure,install" description="Sets up the build environment and builds the components"/>
  <target name="configure" depends="create-basedir,all-profiles" description="Sets up the build environment, identifying which components are to be built"/>
  <target name="clean" depends="mvn-init" description="Calls `mvn clean` to delete any temporary/intermediate build files">
    <exec executable="${mvn}" searchpath="true">
      <arg value="clean" />
    </exec>
  </target>
  <target name="install" depends="mvn-init,os-family" description="Calls `mvn install` to build all components and deploy them to the local repository">
    <exec executable="${mvn}" searchpath="true">
      <arg value="-D" />
      <arg value="root.dir=${basedir}" />
      <arg value="-D" />
      <arg value="os.family=${os.family}" />
      <arg value="install" />
    </exec>
  </target>

  <target name="mvn-init" depends="mvn3-check,mvn-check,mvn.bat-check">
  </target>
  <target name="mvn3-check" unless="mvn">
    <exec executable="mvn3" resultproperty="mvn3.found" failifexecutionfails="false">
      <arg value="-v" />
    </exec>
    <condition property="mvn" value="mvn3">
      <isset property="mvn3.found" />
    </condition>
  </target>
  <target name="mvn-check" unless="mvn">
    <exec executable="mvn" resultproperty="mvn.found" failifexecutionfails="false">
      <arg value="-v" />
    </exec>
    <condition property="mvn" value="mvn">
      <isset property="mvn.found" />
    </condition>
  </target>
  <target name="mvn.bat-check" unless="mvn">
    <exec executable="mvn.bat" resultproperty="mvn.bat.found" failifexecutionfails="false">
      <arg value="-v" />
    </exec>
    <condition property="mvn" value="mvn.bat">
      <isset property="mvn.bat.found" />
    </condition>
  </target>

  <target name="all-profiles" depends="windows-profiles,nix-profiles" />

  <target name="windows-profiles"
      depends="enable-windows-profiles,
               debug-windows-win32-profile,
               release-windows-win32-profile,
               debug-windows-x64-profile,
               release-windows-x64-profile" />

  <target name="enable-windows-profiles" if="profile.windows"
      depends="enable-debug-windows-profiles,
               enable-release-windows-profiles,
               enable-windows-win32-profiles,
               enable-windows-x64-profiles">
    <property name="profile.debug.windows.win32" value="true" />
    <property name="profile.release.windows.win32" value="true" />
    <property name="profile.debug.windows.x64" value="true" />
    <property name="profile.release.windows.x64" value="true" />
  </target>
  <target name="enable-debug-windows-profiles" if="profile.debug.windows">
    <property name="profile.debug.windows.win32" value="true" />
    <property name="profile.debug.windows.x64" value="true" />
  </target>
  <target name="enable-release-windows-profiles" if="profile.release.windows">
    <property name="profile.release.windows.win32" value="true" />
    <property name="profile.release.windows.x64" value="true" />
  </target>
  <target name="enable-windows-win32-profiles" if="profile.windows.win32">
    <property name="profile.debug.windows.win32" value="true" />
    <property name="profile.release.windows.win32" value="true" />
  </target>
  <target name="enable-windows-x64-profiles" if="profile.windows.x64">
    <property name="profile.debug.windows.x64" value="true" />
    <property name="profile.release.windows.x64" value="true" />
  </target>

  <target name="debug-windows-win32-profile" if="profile.debug.windows.win32">
    <antcall target="create-profile">
      <param name="configuration" value="debug" />
      <param name="family" value="windows" />
      <param name="platform" value="win32" />
    </antcall>
  </target>
  <target name="release-windows-win32-profile" if="profile.release.windows.win32">
    <antcall target="create-profile">
      <param name="configuration" value="release" />
      <param name="family" value="windows" />
      <param name="platform" value="win32" />
    </antcall>
  </target>
  <target name="debug-windows-x64-profile" if="profile.debug.windows.x64">
    <antcall target="create-profile">
      <param name="configuration" value="debug" />
      <param name="family" value="windows" />
      <param name="platform" value="x64" />
    </antcall>
  </target>
  <target name="release-windows-x64-profile" if="profile.release.windows.x64">
    <antcall target="create-profile">
      <param name="configuration" value="release" />
      <param name="family" value="windows" />
      <param name="platform" value="x64" />
    </antcall>
  </target>

  <target name="nix-profiles"
      depends="enable-nix-profiles,
               debug-nix-profile,
               release-nix-profile" />

  <target name="enable-nix-profiles" if="profile.nix"
      depends="enable-debug-nix-profile,
               enable-release-nix-profile">
    <property name="profile.debug.nix" value="true" />
    <property name="profile.release.nix" value="true" />
  </target>
  <target name="enable-debug-nix-profile" if="profile.debug.nix">
    <property name="profile.debug.nix" value="true" />
  </target>
  <target name="enable-release-nix-profile" if="profile.release.nix">
    <property name="profile.release.nix" value="true" />
  </target>

  <target name="debug-nix-profile" if="profile.debug.nix">
    <antcall target="create-profile">
      <param name="configuration" value="debug" />
      <param name="family" value="nix" />
      <param name="platform" value="${os.arch}" />
    </antcall>
  </target>
  <target name="release-nix-profile" if="profile.release.nix">
    <antcall target="create-profile">
      <param name="configuration" value="release" />
      <param name="family" value="nix" />
      <param name="platform" value="${os.arch}" />
    </antcall>
  </target>

  <target name="create-basedir">
    <mkdir dir="target" />
    <delete dir="target/profile" failonerror="false" />
    <mkdir dir="target/profile" />
  </target>

  <target name="create-profile">
    <antcall target="create-profile-files"><param name="profile" value="${configuration}" /></antcall>
    <antcall target="create-profile-files"><param name="profile" value="${family}" /></antcall>
    <antcall target="create-profile-files"><param name="profile" value="${configuration}-${family}" /></antcall>
    <antcall target="create-profile-files"><param name="profile" value="${family}-${platform}" /></antcall>
    <antcall target="create-profile-files"><param name="profile" value="${configuration}-${family}-${platform}" /></antcall>
  </target>
  <target name="create-profile-files"
      depends="create-profile-msvc,
               create-profile-cpptasks,
               create-profile-r,
               create-profile-ai">
    <touch file="target/profile/${profile}" />
  </target>
  <target name="create-profile-msvc" if="tool.msvc">
    <touch file="target/profile/${profile}-msvc" />
  </target>
  <target name="create-profile-cpptasks" if="tool.cpptasks">
    <touch file="target/profile/${profile}-cpptasks" />
  </target>
  <target name="create-profile-r" if="tool.r">
    <touch file="target/profile/${profile}-r" />
  </target>
  <target name="create-profile-ai" if="tool.ai">
    <touch file="target/profile/${profile}-ai" />
  </target>

  <target name="os-family" depends="os-family-unix,os-family-windows" unless="os.family">
    <fail message="Operating System family not recognised" />
  </target>
  <target name="os-family-unix" unless="os.family">
    <condition property="os.family" value="unix">
      <os family="unix" />
    </condition>
  </target>
  <target name="os-family-windows" unless="os.family">
    <condition property="os.family" value="windows">
      <os family="windows" />
    </condition>
  </target>

</project>
