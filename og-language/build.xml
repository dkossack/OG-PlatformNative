<project name="og-language" default="compile"
    xmlns:artifact="antlib:org.apache.maven.artifact.ant">
  <!-- NOTE: this requires Ant v1.9.1 -->

  <property file="build.properties"/>

  <!-- Install maven artifact tool -->
  <target name="install">
    <!-- setup properties and directores -->
	  <property name="lib.dir" value="${build.dir}/lib" />
	  <property name="lib.ant.dir" value="${lib.dir}/ant" />
	  <property name="lib.ant.jar" value="${lib.ant.dir}/maven-ant-tasks-2.1.3.jar" />
    <property name="lib.runtime.dir" value="${lib.dir}/runtime" />
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${lib.dir}"/>
	  <mkdir dir="${lib.ant.dir}"/>
	  <mkdir dir="${lib.runtime.dir}"/>
    <!-- get ant tasks -->
	  <available file="${lib.ant.jar}" property="artifact.exists"/>
    <antcall target="install-get" />
	  <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="antlib:org.apache.maven.artifact.ant">
	    <classpath>
	      <pathelement location="${lib.ant.jar}" />
	    </classpath>
	  </typedef>
    <!-- read pom -->
	  <artifact:pom id="pom" file="pom.xml" />
	  <echo message="POM project id: ${pom.groupId}:${pom.artifactId}:${pom.version}"/>
	  <property name="version" value="${pom.version}" />
    <!-- get dependencies -->
    <artifact:dependencies filesetId="dependency.runtime.fileset" useScope="runtime">
      <pom refid="pom"/>
    </artifact:dependencies>
    <copy todir="${lib.runtime.dir}" verbose="true">
      <fileset refid="dependency.runtime.fileset" />
      <mapper type="flatten" />
    </copy>  
  </target>
  <target name="install-get" unless="artifact.exists">
	  <echo message="Installing Maven Ant tasks..."/>
	  <get src="http://www.eu.apache.org/dist/maven/ant-tasks/2.1.3/binaries/maven-ant-tasks-2.1.3.jar "
	       dest="${lib.ant.jar}" usetimestamp="true" ignoreerrors="${artifact.exists}"/>
  </target>

  <target name="init" depends="install" description="Initializes the build">
  </target>

  <target name="clean" description="Cleans the build">
    <delete includeemptydirs="true">
      <fileset dir="${build.dir}">
        <include name="**/*" />
        <exclude name="lib/ant/**" />
      </fileset>
    </delete>
  </target>

  <target name="compile" depends="init" description="Compiles the project">
    <echo message="TODO" />
  </target>

<!--
  <import file="${basedir}/build-core.xml" />
  <import file="${basedir}/build-core-deploy.xml" />
  <import file="${basedir}/delete-unused-jars.xml" />

  <target name="fudge-proto" depends="core.fudge-proto">
    <subant buildpath="${solution.dir}/Service" target="fudge-proto" inheritall="true" inheritrefs="true" />
  </target>

  <path id="cc.build.path">
    <pathelement path="${solution.dir}/Util" />
    <pathelement path="${solution.dir}/Service" />
    <pathelement path="${solution.dir}/Connector" />
    <pathelement path="${solution.dir}/ServiceRunner" />
  </path>

  <path id="cctest.build.path">
    <pathelement path="${solution.dir}/UtilTest" />
    <pathelement path="${solution.dir}/ServiceTest" />
    <pathelement path="${solution.dir}/ConnectorTest" />
  </path>

  <target name="dist-publish" depends="core.dist-publish">
    <mkdir dir="${dist.dir}" />
    <mkdir dir="${dist.dir}/bin" />
    <mkdir dir="${dist.dir}/include" />
    <mkdir dir="${dist.dir}/lib" />
    <subant buildpathref="cc.build.path" target="dist-publish" inheritall="true" />
    <mkdir dir="${dist.dir}/bin/ext" />
    <copy file="${solution.dir}/config/0${ant.project.name}.xml" todir="${dist.dir}/bin/ext" />
    <zip destfile="${dist.dir}/${ant.project.name}-bin.zip" basedir="${dist.dir}/bin" whenempty="create" />
    <zip destfile="${dist.dir}/${ant.project.name}-include.zip" basedir="${dist.dir}/include" whenempty="create" />
    <zip destfile="${dist.dir}/${ant.project.name}-lib.zip" basedir="${dist.dir}/lib" whenempty="create" />
    <zip destfile="${dist.dir}/${ant.project.name}-msm.zip" whenempty="create">
      <fileset dir="${build.dir}">
        <include name="*.msm" />
      </fileset>
    </zip>
    <delete dir="${dist.dir}/bin" />
    <delete dir="${dist.dir}/include" />
    <delete dir="${dist.dir}/lib" />
  </target>

  <target name="resolve" depends="core.resolve,deploy-jars,delete-unused-jars" />

  <target name="config" depends="core.config,deploy-config">
    <copy todir="${build.dir}/ext" file="${solution.dir}/config/0${ant.project.name}.xml" />
  </target>

  <target name="compile-tests" depends="core.compile-tests">
    <property file="${common.dir}/tests.properties" />
    <path id="language.ext.path.system">
      <pathelement path="${build.dir}/ext" />
    </path>
    <pathconvert targetos="unix" property="language.ext.path.unix" refid="language.ext.path.system" />
    <echo file="${test.properties.dir}/${test.properties}">language.ext.path=${language.ext.path.unix}
opengamma.engine.host=${opengamma.engine.host}
</echo>
  </target>

  <target name="test-batch-cpp" depends="jar,core.test-batch-cpp" />

  <target name="compile-msm-impl">
    <installer-make file="ClientSDK.aip" />
    <installer-make file="Core.aip" />
    <installer-make file="Service32.aip" />
    <installer-make file="Service64.aip" />
  </target>
  <target name="installer-impl">
    <installer-make build-id="${ai.build.all}" />
  </target>
-->
</project>
