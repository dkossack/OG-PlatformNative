/*
 * Copyright (C) 2011 - present by OpenGamma Inc. and the OpenGamma group of companies
 *
 * Please see distribution for license.
 */

#ifndef __inc_og_language_connector_requestbuilder_h
#define __inc_og_language_connector_requestbuilder_h

#include "Connector.h"

/// Constructs a request to send to the Java stack. If a response is received, a pointer
/// to the object allocated internally is returned. This must not be freed by the caller
/// it will be deallocated at RequestBuilder destruction. If the returned object is needed
/// beyond the lifetime of the RequestBuilder, call DetachResponse.
class CRequestBuilder {
private:

	/// Underlying connector for the messaging
	const CConnector *m_poConnector;

	/// Query sent to the Java stack, allowing overlapped operation.
	CConnector::CCall *m_poQuery;

protected:

	/// Pointer to the response; it is up to a sub-class to cast this and manage the
	/// allocation.
	void *m_pResponse;

	/// Initialises local variables and state; may be used by user code in a sub-class -
	/// it is called from the constructor generated by the REQUESTBUILDER_BEGIN macro.
	virtual void Init () { }

	/// Initialises local variables; used by the REQUESTBUILDER_REQUEST macro.
	virtual void _Init () { }

	/// Destroys local variables and state; may be used by user code in a sub-class - it
	/// is called from the destructor generated by the REQUESTBUILDER_BEGIN macro.
	virtual void Done () { }

	/// Destroys local variables; used by the REQUESTBUILDER_RESPONSE macro.
	virtual void _Done () { }

	/// Called before sending the message to validate it has been built correctly.
	///
	/// @return TRUE to sent the message, FALSE to not send.
	virtual bool SendOk () const { return true; }

	bool SendMsg (FudgeMsg msg);
	bool PostMsg (FudgeMsg msg);
	FudgeMsg RecvMsg (long lTimeout);
public:
	CRequestBuilder (const CConnector *poConnector);
    virtual ~CRequestBuilder ();
    static long GetDefaultTimeout ();

	/// Returns the connector instance associated with the request. The reference count is
	/// incremented and the caller must call Release when finished with it.
	///
	/// @return the connector instance, never NULL
    const CConnector *GetConnector () const { m_poConnector->Retain (); return m_poConnector; }

#define CONCAT(_a_, _b_) _a_##_b_

#define REQUESTBUILDER_REQUEST_(_objtype_, _method_) \
protected: \
	_objtype_ m_request; \
	bool Send (_objtype_ *obj) { \
		if (!obj) return false; \
		FudgeMsg msg; \
		if (CONCAT(_objtype_, _toFudgeMsg) (obj, &msg) != FUDGE_OK) return false; \
		bool bResult = _method_ (msg); \
		FudgeMsg_release (msg); \
		return bResult; \
	} \
	void _Init () { \
		memset (&m_request, 0, sizeof (m_request)); \
	} \
public: \
	bool Send () { return SendOk () ? Send (&m_request) : false; }

#define REQUESTBUILDER_REQUEST(_objtype_) REQUESTBUILDER_REQUEST_ (_objtype_, SendMsg)
#define REQUESTBUILDER_POST(_objtype_) REQUESTBUILDER_REQUEST_ (_objtype_, PostMsg)

#define REQUESTBUILDER_RESPONSE(_objtype_) \
protected: \
	void _Done () { \
		if (m_pResponse) { CONCAT (_objtype_, _free) ((_objtype_*)m_pResponse); m_pResponse = NULL; } \
	} \
public: \
	_objtype_ *Recv (long lTimeout) { \
		if (m_pResponse) return (_objtype_*)m_pResponse; \
		FudgeMsg msg = RecvMsg (lTimeout); \
		if (!msg) return NULL; \
		if (CONCAT (_objtype_, _fromFudgeMsg) (msg, (_objtype_**)&m_pResponse) != FUDGE_OK) { \
			m_pResponse = NULL; \
		} \
		FudgeMsg_release (msg); \
		return (_objtype_*)m_pResponse; \
	} \
	_objtype_ *DetachResponse () { \
		_objtype_ *pResponse = Recv (GetDefaultTimeout ()); \
		m_pResponse = NULL; \
		return pResponse; \
	}

};

#define REQUESTBUILDER_BEGIN(_class_) \
	class _class_ : public CRequestBuilder { \
	public: \
		_class_ (const CConnector *poConnector) : CRequestBuilder (poConnector) { _Init (); Init (); } \
		~_class_ () { _Done (); Done (); }

#define REQUESTBUILDER_END };

#endif /* ifndef __inc_og_language_connector_requestbuilder_h */
