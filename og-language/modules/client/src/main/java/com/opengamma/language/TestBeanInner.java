package com.opengamma.language;

import java.util.Map;
import java.util.Set;

import org.joda.beans.Bean;
import org.joda.beans.BeanBuilder;
import org.joda.beans.BeanDefinition;
import org.joda.beans.JodaBeanUtils;
import org.joda.beans.MetaProperty;
import org.joda.beans.Property;
import org.joda.beans.PropertyDefinition;
import org.joda.beans.impl.direct.DirectBeanBuilder;
import org.joda.beans.impl.direct.DirectMetaBean;
import org.joda.beans.impl.direct.DirectMetaProperty;
import org.joda.beans.impl.direct.DirectMetaPropertyMap;

/**
 * Copyright (C) 2012 - present by OpenGamma Inc. and the OpenGamma group of companies
 * <p/>
 * Please see distribution for license.
 */
@BeanDefinition
public class TestBeanInner implements Bean {

  @PropertyDefinition
  private String a;

  @PropertyDefinition
  private Integer b;

  @PropertyDefinition
  private Set<String> c;




  //------------------------- AUTOGENERATED START -------------------------
  ///CLOVER:OFF
  /**
   * The meta-bean for {@code TestBeanInner}.
   * @return the meta-bean, not null
   */
  public static TestBeanInner.Meta meta() {
    return TestBeanInner.Meta.INSTANCE;
  }

  static {
    JodaBeanUtils.registerMetaBean(TestBeanInner.Meta.INSTANCE);
  }

  @Override
  public TestBeanInner.Meta metaBean() {
    return TestBeanInner.Meta.INSTANCE;
  }

  @Override
  public <R> Property<R> property(String propertyName) {
    return metaBean().<R>metaProperty(propertyName).createProperty(this);
  }

  @Override
  public Set<String> propertyNames() {
    return metaBean().metaPropertyMap().keySet();
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the a.
   * @return the value of the property
   */
  public String getA() {
    return a;
  }

  /**
   * Sets the a.
   * @param a  the new value of the property
   */
  public void setA(String a) {
    this.a = a;
  }

  /**
   * Gets the the {@code a} property.
   * @return the property, not null
   */
  public final Property<String> a() {
    return metaBean().a().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the b.
   * @return the value of the property
   */
  public Integer getB() {
    return b;
  }

  /**
   * Sets the b.
   * @param b  the new value of the property
   */
  public void setB(Integer b) {
    this.b = b;
  }

  /**
   * Gets the the {@code b} property.
   * @return the property, not null
   */
  public final Property<Integer> b() {
    return metaBean().b().createProperty(this);
  }

  //-----------------------------------------------------------------------
  /**
   * Gets the c.
   * @return the value of the property
   */
  public Set<String> getC() {
    return c;
  }

  /**
   * Sets the c.
   * @param c  the new value of the property
   */
  public void setC(Set<String> c) {
    this.c = c;
  }

  /**
   * Gets the the {@code c} property.
   * @return the property, not null
   */
  public final Property<Set<String>> c() {
    return metaBean().c().createProperty(this);
  }

  //-----------------------------------------------------------------------
  @Override
  public TestBeanInner clone() {
    BeanBuilder<? extends TestBeanInner> builder = metaBean().builder();
    for (MetaProperty<?> mp : metaBean().metaPropertyIterable()) {
      if (mp.style().isBuildable()) {
        Object value = mp.get(this);
        if (value instanceof Bean) {
          value = ((Bean) value).clone();
        }
        builder.set(mp.name(), value);
      }
    }
    return builder.build();
  }

  @Override
  public boolean equals(Object obj) {
    if (obj == this) {
      return true;
    }
    if (obj != null && obj.getClass() == this.getClass()) {
      TestBeanInner other = (TestBeanInner) obj;
      return JodaBeanUtils.equal(getA(), other.getA()) &&
          JodaBeanUtils.equal(getB(), other.getB()) &&
          JodaBeanUtils.equal(getC(), other.getC());
    }
    return false;
  }

  @Override
  public int hashCode() {
    int hash = getClass().hashCode();
    hash += hash * 31 + JodaBeanUtils.hashCode(getA());
    hash += hash * 31 + JodaBeanUtils.hashCode(getB());
    hash += hash * 31 + JodaBeanUtils.hashCode(getC());
    return hash;
  }

  @Override
  public String toString() {
    StringBuilder buf = new StringBuilder(128);
    buf.append("TestBeanInner{");
    int len = buf.length();
    toString(buf);
    if (buf.length() > len) {
      buf.setLength(buf.length() - 2);
    }
    buf.append('}');
    return buf.toString();
  }

  protected void toString(StringBuilder buf) {
    buf.append("a").append('=').append(JodaBeanUtils.toString(getA())).append(',').append(' ');
    buf.append("b").append('=').append(JodaBeanUtils.toString(getB())).append(',').append(' ');
    buf.append("c").append('=').append(JodaBeanUtils.toString(getC())).append(',').append(' ');
  }

  //-----------------------------------------------------------------------
  /**
   * The meta-bean for {@code TestBeanInner}.
   */
  public static class Meta extends DirectMetaBean {
    /**
     * The singleton instance of the meta-bean.
     */
    static final Meta INSTANCE = new Meta();

    /**
     * The meta-property for the {@code a} property.
     */
    private final MetaProperty<String> _a = DirectMetaProperty.ofReadWrite(
        this, "a", TestBeanInner.class, String.class);
    /**
     * The meta-property for the {@code b} property.
     */
    private final MetaProperty<Integer> _b = DirectMetaProperty.ofReadWrite(
        this, "b", TestBeanInner.class, Integer.class);
    /**
     * The meta-property for the {@code c} property.
     */
    @SuppressWarnings({"unchecked", "rawtypes" })
    private final MetaProperty<Set<String>> _c = DirectMetaProperty.ofReadWrite(
        this, "c", TestBeanInner.class, (Class) Set.class);
    /**
     * The meta-properties.
     */
    private final Map<String, MetaProperty<?>> _metaPropertyMap$ = new DirectMetaPropertyMap(
        this, null,
        "a",
        "b",
        "c");

    /**
     * Restricted constructor.
     */
    protected Meta() {
    }

    @Override
    protected MetaProperty<?> metaPropertyGet(String propertyName) {
      switch (propertyName.hashCode()) {
        case 97:  // a
          return _a;
        case 98:  // b
          return _b;
        case 99:  // c
          return _c;
      }
      return super.metaPropertyGet(propertyName);
    }

    @Override
    public BeanBuilder<? extends TestBeanInner> builder() {
      return new DirectBeanBuilder<TestBeanInner>(new TestBeanInner());
    }

    @Override
    public Class<? extends TestBeanInner> beanType() {
      return TestBeanInner.class;
    }

    @Override
    public Map<String, MetaProperty<?>> metaPropertyMap() {
      return _metaPropertyMap$;
    }

    //-----------------------------------------------------------------------
    /**
     * The meta-property for the {@code a} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<String> a() {
      return _a;
    }

    /**
     * The meta-property for the {@code b} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Integer> b() {
      return _b;
    }

    /**
     * The meta-property for the {@code c} property.
     * @return the meta-property, not null
     */
    public final MetaProperty<Set<String>> c() {
      return _c;
    }

    //-----------------------------------------------------------------------
    @Override
    protected Object propertyGet(Bean bean, String propertyName, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 97:  // a
          return ((TestBeanInner) bean).getA();
        case 98:  // b
          return ((TestBeanInner) bean).getB();
        case 99:  // c
          return ((TestBeanInner) bean).getC();
      }
      return super.propertyGet(bean, propertyName, quiet);
    }

    @SuppressWarnings("unchecked")
    @Override
    protected void propertySet(Bean bean, String propertyName, Object newValue, boolean quiet) {
      switch (propertyName.hashCode()) {
        case 97:  // a
          ((TestBeanInner) bean).setA((String) newValue);
          return;
        case 98:  // b
          ((TestBeanInner) bean).setB((Integer) newValue);
          return;
        case 99:  // c
          ((TestBeanInner) bean).setC((Set<String>) newValue);
          return;
      }
      super.propertySet(bean, propertyName, newValue, quiet);
    }

  }

  ///CLOVER:ON
  //-------------------------- AUTOGENERATED END --------------------------
}
